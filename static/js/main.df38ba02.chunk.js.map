{"version":3,"sources":["Form.jsx","TodoItem.jsx","TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Container","styled","form","Form","Paper","onSubmit","this","props","handleSubmit","TextField","className","type","label","name","placeholder","margin","Button","variant","React","Component","Li","li","TodoItem","todo","buttonText","isDone","id","handleClick","isEdit","e","preventDefault","handleEditSubmit","title","desc","onClick","handleClickDelete","handleEdit","TodoList","list","todos","map","i","div","App","state","target","value","newTodos","slice","push","length","setState","DeletedTodos","splice","window","confirm","editTodos","editedTodos","bind","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df38ba02.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nimport styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nconst Container = styled.form`\r\npadding: 15px;\r\n.textField {\r\n    display: block;\r\n}\r\n`\r\n\r\nexport default class Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <Paper>\r\n                <Container onSubmit={this.props.handleSubmit}>\r\n                    <TextField className=\"textField\" type=\"text\" label=\"title\" name=\"title\" placeholder=\"タイトル\" margin=\"normal\" />\r\n                    <TextField className=\"textField\" type=\"text\" label=\"desc\" name=\"desc\" placeholder=\"詳細\" margin=\"normal\" />\r\n                    <Button type=\"submit\" variant=\"contained\">追加</Button>\r\n                </Container>\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\n\r\nconst Li = styled.li`\r\nlist-style: none;\r\n.paper {\r\n    margin-top: 10px;\r\n    padding: 15px;\r\n}\r\n.textField {\r\n    display: block;\r\n}\r\n`\r\n\r\nexport default class TodoItem extends React.Component {\r\n    render() {\r\n        const buttonText = this.props.isDone ? \"戻す\" : \"完了\" \r\n        const id = this.props.id\r\n        const handleClick = this.props.handleClick\r\n        let todo\r\n        if (this.props.isEdit === true) {\r\n            todo = \r\n            <form onSubmit={(e)=>{\r\n                e.preventDefault()\r\n                this.props.handleEditSubmit(e, id)}}>\r\n                <TextField className=\"textField\" type=\"text\" label=\"title\" name=\"title\" placeholder={this.props.title} />\r\n                <TextField className=\"textField\" type=\"text\" label=\"desc\" name=\"desc\" placeholder={this.props.desc} />\r\n                <Button type=\"submit\" variant=\"contained\">編集完了</Button>\r\n            </form>\r\n        } else {\r\n            todo = \r\n            <div>\r\n                <p>{this.props.title}</p>\r\n                <p>{this.props.desc}</p>\r\n                <Button onClick={()=>{handleClick(id)}} variant=\"contained\">{buttonText}</Button>\r\n                <Button onClick={()=>{this.props.handleClickDelete(id)}} variant=\"contained\">削除</Button>\r\n                <Button onClick={()=>{this.props.handleEdit(id)}} variant=\"contained\">編集</Button>\r\n            </div>\r\n        }\r\n        return (\r\n            <Li>\r\n                <Paper className=\"paper\">\r\n                    {todo}\r\n                </Paper>\r\n            </Li>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from \"react\"\r\nimport TodoItem from \"./TodoItem\"\r\n\r\nexport default class TodoList extends React.Component {\r\n    render() {\r\n        let list = this.props.todos.map((todo, i)=>{\r\n            return (\r\n                <TodoItem \r\n                id={todo.id}\r\n                title={todo.title}\r\n                desc={todo.desc}\r\n                isDone={todo.isDone}\r\n                isEdit={todo.isEdit}\r\n                handleClick={this.props.handleClick}\r\n                handleClickDelete={this.props.handleClickDelete}\r\n                handleEdit={this.props.handleEdit}\r\n                handleEditSubmit={this.props.handleEditSubmit}\r\n                ></TodoItem>\r\n            )\r\n        })\r\n        return (\r\n            <ul>\r\n                {list}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from \"react\"\nimport Form from \"./Form\"\nimport TodoList from \"./TodoList\"\nimport styled from \"styled-components\"\n\nconst Container = styled.div`\nbackground-color: #F5F5F5;\n`\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\ttodos : [\n\t\t\t\t{\n\t\t\t\t\tid : 0,\n\t\t\t\t\ttitle : \"React\",\n\t\t\t\t\tdesc : \"コンポーネントを作る\",\n\t\t\t\t\tisDone: false,\n\t\t\t\t\tisEdit: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid : 1,\n\t\t\t\t\ttitle : \"LP作成\",\n\t\t\t\t\tdesc : \"レスポンシブ対応でLP作成\",\n\t\t\t\t\tisDone : false,\n\t\t\t\t\tisEdit: false\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n\thandleSubmit(e) {\n\t\te.preventDefault()\n\t\tconst title = e.target.title.value\n\t\tconst desc = e.target.desc.value\n\t\tconst newTodos = this.state.todos.slice()\n\t\tnewTodos.push({\n\t\t\tid : this.state.todos.length,\n\t\t\ttitle : title,\n\t\t\tdesc : desc,\n\t\t\tisDone : false,\n\t\t\tisEdit : false\n\t\t})\n\t\tthis.setState({\n\t\t\ttodos : newTodos\n\t\t})\n\t}\n\thandleClick(id) {\n\t\tconst newTodos = this.state.todos.slice()\n\t\tnewTodos[id].isDone =! newTodos[id].isDone\n\t\tthis.setState({\n\t\t\ttodos : newTodos\n\t\t})\n\t}\n\thandleClickDelete(id) {\n\t\tconst DeletedTodos = this.state.todos.slice()\n\t\tDeletedTodos.splice(id, 1)\n\t\tDeletedTodos.map((todo, i)=>{\n\t\t\treturn (\n\t\t\t\ttodo.id = i,\n\t\t\t\ttodo.title = todo.title,\n\t\t\t\ttodo.desc = todo.desc,\n\t\t\t\ttodo.isDone = todo.isDone,\n\t\t\t\ttodo.isEdit = todo.isEdit\n\t\t\t)\n\t\t})\n\t\tlet deleteConfirm = window.confirm(\"「\" + this.state.todos[id].title + \"」\" + \"を削除しますか?\")\n\t\tif (deleteConfirm) {\n\t\t\tthis.setState({\n\t\t\t\ttodos: DeletedTodos\n\t\t\t})\n\t\t}\n\t}\n\thandleEdit(id) {\n\t\tconst editTodos = this.state.todos.slice()\n\t\teditTodos[id].isEdit = true\n\t\tthis.setState({\n\t\t\ttodos : editTodos\n\t\t})\n\t}\n\thandleEditSubmit(e, id) {\n\t\tconst editedTodos = this.state.todos.slice()\n\t\tconst title = e.target.title.value\n\t\tconst desc = e.target.desc.value\n\t\teditedTodos[id].title = title\n\t\teditedTodos[id].desc = desc\n\t\teditedTodos[id].isEdit = false\n\t\tthis.setState({\n\t\t\ttodos : editedTodos\n\t\t})\n\t}\n\trender() {\n\t\treturn (\n\t  \t\t<Container>\n\t\t\t\t<Form handleSubmit={this.handleSubmit.bind(this)}></Form>\n\t\t\t\t<TodoList todos={this.state.todos} \n\t\t\t\thandleClick={this.handleClick.bind(this)}\n\t\t\t\thandleClickDelete={this.handleClickDelete.bind(this)}\n\t\t\t\thandleEdit={this.handleEdit.bind(this)}\n\t\t\t\thandleEditSubmit={this.handleEditSubmit.bind(this)}\n\t\t\t\t></TodoList>\n\t  \t\t</Container>\n\t\t)\n  \t}\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}